plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}


def FileCopy(src_file,dst_dir,src_name,dst_name){

    copy {
        from src_file
        into dst_dir
        rename(src_name,dst_name)
        println("gradle:copy file success. src:"+src_file+"->"+dst_dir+"/"+dst_name)
    }
}


static def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

task myTask {
    doLast {
        exec {
            commandLine 'powershell', '-c', 'echo Hello, World!'
        }
    }
}


def build_Module_copy_file(type,taskname,file_name){
    def command
    def Asset_dir
    def gradlew = "gradlew"
    def sh = "bash"
    if(isWindows()) {
        sh = "powershell"
        gradlew = "gradlew.bat"

    }

    if(type.equals("debug")){
        println("rxposed gradle:"+"externalNativeBuildDebug")
        Asset_dir = "mergeDebugAssets"
        command = "../${gradlew} -p ../${taskname} externalNativeBuildDebug"

    }
    if(type.equals("release")){
        println("rxposed gradle:"+"externalNativeBuildRelease")
        Asset_dir = "mergeReleaseAssets"
        command = "../${gradlew} -p ../${taskname} externalNativeBuildRelease"
    }
//    try {
//        def process = new ProcessBuilder(sh, "-c", command).redirectErrorStream(true).start()
//        def output = new StringBuilder()
//        process.inputStream.eachLine { line ->
//            output.append(line).append('\n')
//        }
//        process.waitFor()
//        println output.toString()
//    } catch (IOException e) {
//        e.printStackTrace()
//    }

    exec {
        commandLine sh ,command
        ignoreExitValue true
    }


//    exec {
//        try {
//            executable  sh
//            args '-c', command
//            println("the command is execute success")
//        } catch (GradleException e) {
//            println("the command is execute failed")
//        }
//    }


    def arch_arm64 = "arm64-v8a"
    def arm64_fromFile = rootProject.file("${taskname}/build/intermediates/cmake/${type}/obj/${arch_arm64}/${file_name}")
    def arm64_intoDir = rootProject.file("Manager/build/intermediates/assets/${type}/${Asset_dir}")
    FileCopy(arm64_fromFile,arm64_intoDir,file_name,"arm64_${file_name}")

    def arch_armv7 = "armeabi-v7a"
    def armv7_fromFile = rootProject.file("${taskname}/build/intermediates/cmake/${type}/obj/${arch_armv7}/${file_name}")
    def armv7_intoDir = rootProject.file("Manager/build/intermediates/assets/${type}/${Asset_dir}")
    FileCopy(armv7_fromFile,armv7_intoDir,file_name,"armv7_${file_name}")

}

android {
    compileSdk 33

    defaultConfig {
        applicationId "hepta.rxposed.manager"
        minSdk 28
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                //                cppFlags "-frtti -fexceptions -Wpointer-arith"
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }

            ndk {
                abiFilters 'armeabi-v7a','arm64-v8a'           //写在这里
            }
        }
        buildConfigField "String", "Rxposed_Inject_So", "\"${Rxposed_Inject_So}\""

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }

    dataBinding {
        enabled = true
    }
    ndkVersion '23.1.7779620'

    android.applicationVariants.all { variant ->
        variant.outputs.each { variantOutput ->
            println("applicationVariants.name----------------${variant.name}")
//            println("applicationVariants.description----------------${variant.description}")
//            println("applicationVariants.mergeAssets----------------${variant.mergeAssets}")
//            println("applicationVariants.name----------------${variant.mergeAssets.name}")

            variant.mergeAssetsProvider.get().doLast {
                println("mergeAssetsProvider.name----------------${variant.name}")
//                build_Module_copy_file(variant.name,"nativeloader","${Rxposed_Inject_So_name}")
                build_Module_copy_file(variant.name,"Tool","InjectTool")

            }
        }
    }
}




dependencies {

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.github.ChickenHook:RestrictionBypass:2.2'


    //appbar toolbarlayout
    implementation "com.hendraanggrian.material:collapsingtoolbarlayout-subtitle:1.5.0"

    //RecyclerView
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.11'
    //Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:2.5.3"
    implementation "androidx.navigation:navigation-ui-ktx:2.5.3"

    //dialogs
    implementation 'com.afollestad.material-dialogs:bottomsheets:3.3.0'
    implementation 'com.afollestad.material-dialogs:input:3.3.0'


    implementation 'com.tencent:mmkv:1.2.15'
    implementation 'com.google.code.gson:gson:2.10.1'


    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}